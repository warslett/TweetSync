#!/usr/bin/php
<?php

/**
 * The contents of this file is temporary for testing against the real twitter API.
 * Config and DI will be moved into config files once Symfony DI has been implemented.
 */

require __DIR__.'/../vendor/autoload.php';

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\Setup;
use Symfony\Component\Console\Application;
use WArslett\TweetSync\Console\SyncUserCommand;
use WArslett\TweetSync\Model\TweetFactory;
use WArslett\TweetSync\Model\TwitterUserFactory;
use WArslett\TweetSync\ORM\Doctrine\TweetPersistenceService;
use WArslett\TweetSync\Remote\TweetSync;
use WArslett\TweetSync\Remote\TwitterApiExchangeRemoteService;

$application = new Application();
$paths = array(__DIR__ . "/../src/Resources/config/doctrine");
$dbParams = array(
    'driver'   => 'pdo_sqlite',
    'path'     => __DIR__ . "/../behaviour/tmp/test.sqlite"
);
$config = Setup::createYAMLMetadataConfiguration($paths);
$entityManager = EntityManager::create($dbParams, $config);
$persistenceService = new TweetPersistenceService($entityManager);
$apiExchange = new TwitterAPIExchange(array(
    'oauth_access_token' => '2572576537-Rza7vEqPuqDHwS5BSgIqWp17c4rx6lw9tAD3poz',
    'oauth_access_token_secret' => 'lXreO9NAp25QwEP3VP0gghJurYm4bP42SbSigldAIhD4X',
    'consumer_key' => 'ScjpiHWGrdpdCPCHpkm7XriIP',
    'consumer_secret' => '2JFiYBpnv0x38fYkZ8gL1eviPFEjsTejPTNMH0NohxEb5habkV'
));
$tweetFactory = new TweetFactory($persistenceService->getTwitterUserRepository());
$twitterUserFactory = new TwitterUserFactory();
$remoteService = new TwitterApiExchangeRemoteService($apiExchange, $tweetFactory);
$sync = new TweetSync($remoteService, $persistenceService, $tweetFactory, $twitterUserFactory);
$application->add(new SyncUserCommand($sync));
$application->run();